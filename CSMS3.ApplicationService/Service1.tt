<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ assembly name="System.ServiceModel.dll"#>
<#@ assembly name="System.Runtime.Serialization.dll"#>
<#@ Assembly Name="$(SolutionDir)CSMS3.Infrastructure\bin\$(ConfigurationName)\CSMS3.Infrastructure.dll" #>
<#@ Assembly Name="$(SolutionDir)CSMS3.Application\bin\$(ConfigurationName)\CSMS3.Application.dll" #>
<#@ Assembly Name="$(SolutionDir)CSMS3.ApplicationContract\bin\$(ConfigurationName)\CSMS3.ApplicationContract.dll" #>
<#@ Assembly Name="$(SolutionDir)CSMS3.Domain\bin\$(ConfigurationName)\CSMS3.Domain.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="CSMS3.Application" #>
<#@ import namespace="System.ServiceModel"#>
<#@ include file="Common.tt"#>
// ******************************************************
// DO NOT CHANGE THE CONTENT OF THIS FILE
// This file was generated by the T4 engine and the 
// contents of this source code will be changed after
// the custom tool was run.
// ******************************************************
using System;
using System.Collections.Generic;
using System.ServiceModel;
using CSMS3.Application;
using CSMS3.Application.DTO;
using CSMS3.ApplicationContract;
using CSMS3.Infrastructure;

namespace CSMS3.ApplicationService
{
	[ServiceBehavior(InstanceContextMode = InstanceContextMode.PerSession)]
	public class Service1 : IService1
	{
		private readonly IService1 Service1Impl = ServiceLocator.Instance.GetService<IService1>();
		<#foreach (MethodInfo method in typeof(CSMS3.ApplicationContract.IService1).GetMethods()) {#>
		public <#=GetMethodReturnType(method)#> <#=method.Name#>(<#=GetMethodParameterList(method)#>)
		{
			try
			{
				<#if(method.ReturnType != typeof(void)){#>return<#}#> Service1Impl.<#=method.Name#>(<#=GetMethodParameterValueList(method)#>);
			}
			catch(Exception ex)
			{
				throw new FaultException<FaultData>(FaultData.CreateFromException(ex), FaultData.CreateFaultReason(ex));
			}
		}
<#}#>
		public void Dispose() { Service1Impl.Dispose(); }
	}
}